
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA FALSE LEFT_BRACES LEFT_BRACKET NULL NUM RIGHT_BRACES RIGHT_BRACKET STRING TRUEjson : array\n            | objectarray : LEFT_BRACKET valuelist RIGHT_BRACKETvaluelist : valuelist COMMA value\n\t             | value\n\t             | empty\n\t            object : LEFT_BRACES middle_section RIGHT_BRACESmiddle_section : middle_section COMMA pair\n                      | pair\n                      | emptypair : STRING COLON valuevalue : STRING\n             | NUM\n             | array\n             | object\n             | TRUE\n             | FALSE\n             | NULL\n             empty :  '
    
_lr_action_items = {'LEFT_BRACKET':([0,4,21,24,],[4,4,4,4,]),'LEFT_BRACES':([0,4,21,24,],[5,5,5,5,]),'$end':([1,2,3,20,22,],[0,-1,-2,-3,-7,]),'STRING':([4,5,21,23,24,],[9,19,9,19,9,]),'NUM':([4,21,24,],[10,10,10,]),'TRUE':([4,21,24,],[13,13,13,]),'FALSE':([4,21,24,],[14,14,14,]),'NULL':([4,21,24,],[15,15,15,]),'RIGHT_BRACKET':([4,6,7,8,9,10,11,12,13,14,15,20,22,25,],[-19,20,-5,-6,-12,-13,-14,-15,-16,-17,-18,-3,-7,-4,]),'COMMA':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,22,25,26,27,],[-19,-19,21,-5,-6,-12,-13,-14,-15,-16,-17,-18,23,-9,-10,-3,-7,-4,-8,-11,]),'RIGHT_BRACES':([5,9,10,11,12,13,14,15,16,17,18,20,22,26,27,],[-19,-12,-13,-14,-15,-16,-17,-18,22,-9,-10,-3,-7,-8,-11,]),'COLON':([19,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'json':([0,],[1,]),'array':([0,4,21,24,],[2,11,11,11,]),'object':([0,4,21,24,],[3,12,12,12,]),'valuelist':([4,],[6,]),'value':([4,21,24,],[7,25,27,]),'empty':([4,5,],[8,18,]),'middle_section':([5,],[16,]),'pair':([5,23,],[17,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> json","S'",1,None,None,None),
  ('json -> array','json',1,'p_json','Compiler.py',87),
  ('json -> object','json',1,'p_json','Compiler.py',88),
  ('array -> LEFT_BRACKET valuelist RIGHT_BRACKET','array',3,'p_array','Compiler.py',95),
  ('valuelist -> valuelist COMMA value','valuelist',3,'p_valuelist','Compiler.py',99),
  ('valuelist -> value','valuelist',1,'p_valuelist','Compiler.py',100),
  ('valuelist -> empty','valuelist',1,'p_valuelist','Compiler.py',101),
  ('object -> LEFT_BRACES middle_section RIGHT_BRACES','object',3,'p_object','Compiler.py',109),
  ('middle_section -> middle_section COMMA pair','middle_section',3,'p_middle_section','Compiler.py',116),
  ('middle_section -> pair','middle_section',1,'p_middle_section','Compiler.py',117),
  ('middle_section -> empty','middle_section',1,'p_middle_section','Compiler.py',118),
  ('pair -> STRING COLON value','pair',3,'p_pair','Compiler.py',125),
  ('value -> STRING','value',1,'p_value','Compiler.py',129),
  ('value -> NUM','value',1,'p_value','Compiler.py',130),
  ('value -> array','value',1,'p_value','Compiler.py',131),
  ('value -> object','value',1,'p_value','Compiler.py',132),
  ('value -> TRUE','value',1,'p_value','Compiler.py',133),
  ('value -> FALSE','value',1,'p_value','Compiler.py',134),
  ('value -> NULL','value',1,'p_value','Compiler.py',135),
  ('empty -> <empty>','empty',0,'p_empty','Compiler.py',143),
]
